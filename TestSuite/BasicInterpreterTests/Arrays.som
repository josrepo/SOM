Arrays = (
  ----
  
  testEmptyToInts = (
    | arr |
    arr := Array new: 5.
    (arr at: 1) ifNotNil: [self error: 'should be initialized to nil'].
    
    1 to: 5 do: [:i |
      arr at: i put: i.
      (arr at: i) = i ifFalse: [self error: 'should be i'].
    ].
    
    (arr at: 1) = 1 ifFalse: [self error: 'should be 1'].
    (arr at: 5) = 5 ifFalse: [self error: 'should be 1'].
    ^ arr at: 3
  )
  
  testPutAllInt = (
    | arr |
    arr := Array new: 5.
    arr putAll: 5.
    ^ arr at: 3
  )

  testPutAllNil = (
    | arr |
    arr := Array new: 5.
    (arr at: 4) ifNotNil: [self error: 'should be initialized to nil'].
    
    arr putAll: 5.
    (arr at: 4) = 5 ifFalse: [self error: 'should be set to 5'].
    
    arr putAll: nil.
    
    ^ (arr at: 3) class
  )
  
  testPutAllBlock = (
    | arr b cnt |
    cnt := 0.
    b := [cnt := cnt + 1. cnt].
    arr := Array new: 5.
    arr putAll: b.
    
    1 to: 5 do: [:i|
      (arr at: i) = i ifFalse: [self error: 'block not properly evaluated?']
    ].
    
    ^ arr at: 3
  )
  
  testNewWithAll = (
    | arr |
    arr := Array new: 5 withAll: [1].
    1 to: 5 do: [:i | (arr at: i) = 1 ifFalse: [self error: 'wrong result']].
    ^ arr at: 3
  )

  testAtPut = (
    | arr |
    arr := Array new: 2.
    arr at: 1 put: 1.
    arr at: 2 put: 2.

    1 to: 2 do: [:i|
      (arr at: i) = i ifFalse: [self error: 'should be i']
    ].

    ^ arr at: 1
  )

  testPutDifferentTypes = (
    | arr singleton |

    singleton := Array new: 1.
    singleton at: 1 put: true.

    arr := Array new: 5.
    arr at: 1 put: 1.
    arr at: 2 put: false.
    arr at: 3 put: 'String'.
    arr at: 4 put: #Symbol.
    arr at: 5 put: singleton.

    ^ arr at: 5
  )
  
)